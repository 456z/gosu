#summary Tutorial for a small game using Ruby/Gosu.

= Source code =

The code for the complete game, together with the required media files, can be found in the Gosu distribution of your choice ('examples' directory).
On Windows/Linux: Copy gosu.so into the examples directory, run (or double-click) example.rb.
On OS X: Make a duplicate of `RubyGosu Template.app`, right click it, open its contents  and copy the example.rb and the media folder into the 'Resources' directory. Then run `YourDuplicate.app`.

= 1. Overriding Window's Callbacks =

The easiest way to create a complete Gosu application is to write a new class that derives from Gosu::Window (see the reference for a complete description of its interface). Here's how a minimal GameWindow class might look like:

{{{
require 'gosu'

class GameWindow < Gosu::Window
  def initialize
    super(640, 480, false, 20)
    self.caption = "Gosu Tutorial Game"
  end

  def update
  end

  def draw
  end
end

window = GameWindow.new
window.show
}}}

The constructor initializes the Gosu::Window base class. The parameters shown here create a 640x480 pixels large, non-fullscreen (that's what the "false" stands for) window that will be updated every 20 milliseconds. Then it changes the window's caption, which is empty until then.

update() and draw() are overrides of Gosu::Window's member functions. update() is called every 20 milliseconds here and should contain the main game logic (move objects etc.). 20 is the recommended value.

draw() is called afterwards and whenever the window needs redrawing for other reasons and should contain the rendering code.

Then follows the main program. A window is created and its show() member function is called, which does not return until the window has been closed by the user or its own code. Tada - now you have a small black window with a title of your choice!

= 2. Using Images =

{{{
class GameWindow < Gosu::Window
  def initialize
    super(640, 480, false, 20)
    self.caption = "Gosu Tutorial Game"
    
    @background_image = Gosu::Image.new(self, "media/Space.png", true)
  end

  def update
  end

  def draw
    @background_image.draw(0, 0, 0);
  end
end
}}}

Gosu::Image#initialize takes three arguments. First, like all media resources, it is tied to a window (self). All of Gosu's resources need a Window for initialization and will hold an internal reference to that window. Second, the file name of the image file is given. The third argument specifies whether the image is to be created with hard borders. See BasicConcepts for an explanation.

As mentioned in the last lesson, the window's draw() member function is the place to draw everything, so this is the place for us to draw our background image.

The arguments are almost obvious. The image is drawn at (0;0) - the third image is the Z position; again, see BasicConcepts.