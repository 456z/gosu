#summary Complete listing of all official classes and methods in Ruby/Gosu.
= Ruby API Reference =

== Common arguments ==
  * *Color shortcut:* Whenever a function expects a Gosu::Color value, a 0xAARRGGBB integer can be supplied instead.
  * *Additive drawing:* Valid mode parameters for drawing functions are :default and :additive.
  * *RMagick users:* Magick::Image instances can be passed instead of filenames to Image.new and Image.load_tiles!

== class Gosu::Color ==
  * `initialize(argb)`: argb is a 0xAARRGGBB integer.
  * `initialize(a, r, g, b)`
  * `alpha`
  * `alpha=`
  * `red`
  * `red=`
  * `green`
  * `green=`
  * `blue`
  * `blue=`
  * `hue`
  * `hue=`
  * `saturation`
  * `saturation=`
  * `value`
  * `value=`
  * `self.from_hsv(h, s, v)`: converts a HSV triple into a color. Same as from_ahsv with alpha set to 255.
  * `self.from_ahsv(a, h, s, v)`: converts a HSV triple into a color, with a given alpha. Ranges: alpha from 0..255, h from 0..360, s from 0..1, v from 0..1.

== class Gosu::Font ==
  * `initialize(window, font_name, height)`: font_name can either be the name of a system font, or a filename (must contain '/'). height is the height of the font, in pixels.
  * `height`
  * `text_width(text, factor_x=1)`: Returns the width in pixels the given text would span.
  * `draw(text, x, y, z, factor_x=1, factor_y=1, color=0xffffffff, mode=:default)`
  * `draw_rel(text, x, y, z, rel_x, rel_y, factor_x=1, factor_y=1, color=0xffffffff, mode=:default)`: If relX is 0.0, the text will be to the right of x, if it is 1.0, the text will be to the left of x, if it is 0.5, it will be centered on x. Of course, all real numbers are possible values. The same applies to relY.
  * `draw_rot(text, x, y, z, angle, factor_x=1, factor_y=1, color=0xffffffff, mode=:default)`: Same as `draw` but rotated at the top left corner.

== class Gosu::Image ==
  * `initialize(window, filename_or_rmagick_image, hard_borders, [srcX, srcY, srcWidth, srcHeight])`
  * `width`
  * `height`
  * `draw(x, y, z, factor_x=1, factor_y=1, color=0xffffffff, mode=:default)`
  * `draw_rot(x, y, z, angle, center_x=0.5, center_y=0.5, factor_x=1, factor_y=1, color=0xffffffff, mode=:default)`: center_x Relative horizontal position of the rotation center on the image. 0 is the left border, 1 is the right border, 0.5 is the center (and default)â€”the same applies to center_y, respectively.
  * `draw_as_quad(x1, y1, c1, x2, y2, c2, x3, y3, c3, x4, y4, c4, z, mode=:default)`: Like Window#draw_quad, but with this texture instead of a solid color. Can be used to implement advanced, non-rectangular drawing techniques.
  * `self.from_text(window, text, font_name, font_height, line_spacing, max_width, align)`: Creates a block of text of width max_width. Each line will take font_height + line_spacing pixels of vertical space.`: align must be one of :left, :right, :center oder :justify. : font_name can either be the name of a system font, or a filename (must contain '/').
  * `self.load_tiles(window, filename_or_rmagick_image, tile_width, tile_height, hard_borders)`: tile_width is either the width of one tile in pixels or the number of columns, tile_height is its vertical equivalent
  * `gl_tex_info`: See examples/OpenGLIntegration.rb.

== class Gosu::Sample ==
  * `initialize(window, filename)`
  * `play(vol=1, speed=1)`: See play_pan. Returns a `SampleInstance`.
  * `play_pan(pan=0, vol=1, speed=1)`: pan can be anything from -1.0 (left) to 1.0 (right). vol can be anything from 0.0 (silence) to 1.0 (full volume). Playback speed is only limited by FMOD's capatibilities and can accept very high or low values. Use 1.0 for normal playback speed. Returns a `SampleInstance`.

== class Gosu::SampleInstance ==
  * `stop`: Stops this instance of a sound being played. Does not hurt to call twice, or too late.
  * `playing?`
  * `volume=(vol)`: See Sample#play_pan.
  * `pan=(pan)`: See Sample#play_pan.
  * `speed=(speed)`: See Sample#play_pan.

== class Gosu::Song ==
  * `initialize(window, filename)`
  * `play`
  * `stop`
  * `playing?`
  * `volume=(vol)`, with vol from 0..1.

== class Gosu::TextInput ==
  * `text`: Current text
  * `text=(str)`: Replaces the text and positions the cursor at the end of the line
  * `caret_pos`: Position of the caret as the index of the character that it's left to.
  * `selection_start`: If there is a selection, `selection_start` yields its beginning, using the same indexing scheme as `caret_pos`; otherwise, equal to `caret_pos`.

== class Gosu::Window ==
_Note that you should really only use on instance of this class at the same time. This might change later._
  * `initialize(width, height, fullscreen, update_interval = 16.666666)`: Note`: Having two or more windows and loading samples or songs on both of them will result in an exception. If you want to re-open your game window, make sure the old one is *really* dead.
  * `caption, caption=`
  * `show`: Enters a modal loop where the Window is visible on screen and receives calls to `draw`, `update` etc.
  * `close`: Tells the window to end the current `show` loop as soon as possible.
  * `visible?`: Returns true if a call to show is currently in progress, false before and after that.
  * `update`
  * `draw`
  * `button_down(id)`: Called when the user presses the button with the given id.
  * `button_up(id)`: Called when the user releases the button with the given id.
  * `draw_line(x1, y1, c1, x2, y2, c2, z=0, mode=:default)`
  * `draw_triangle(x1, y1, c1, x2, y2, c2, x3, y3, c3, z=0, mode=:default)`
  * `draw_quad(x1, y1, c1, x2, y2, c2, x3, y3, c3, x4, y4, c4, z=0, mode=:default)`
  * `mouse_x`
  * `mouse_y`
  * `button_down?(id)`
  * `self.button_id_to_char(id)`: Returns the character a given id stands for, or "".
  * `self.char_to_button_id(char)`: Returns the id usually used for a character, or 0.
  * `text_input`
  * `text_input=`: Sets current text input object that builds an input string
  * `width`
  * `height`
  * `gl do ... end`: See examples/OpenGLIntegration.rb.
  * `clip_to(x, y, w, h) do ... end`: Limits the drawing area to a given rectangle while evaluating the code inside of the block.

== Free functions (in module Gosu) ==

  * `offset_x(angle, dist)`: Returns the horizontal distance between the origin and the point to which you would get if you moved radius pixels in the direction specified by angle.

  * `offset_y(angle, dist)`: Returns the vertical distance between the origin and the point to which you would get if you moved radius pixels in the direction specified by angle.

  * `angle(x1, y1, x2, y2)`: Returns the angle between two points in degrees, where 0.0 means upwards. Returns 0 if both points are equal.

  * `distance(x1, y1, x2, y2)`: Returns the distance between two points.

  * `milliseconds()`: Incrementing, possibly wrapping millisecond timer.

  * `default_font_name()`: Returns a font name that will work on any system.

== Button IDs used by the input system (in module Gosu) ==

_For clarity: Kb = Keyboard, Ms = Mouse, Gp = Gamepad._

{{{
Kb0
Kb1
Kb2
Kb3
Kb4
Kb5
Kb6
Kb7
Kb8
Kb9
KbBackspace
KbDelete
KbDown
KbEnd
KbEnter (Numpad)
KbEscape
KbF1
KbF10
KbF11
KbF12
KbF2
KbF3
KbF4
KbF5
KbF6
KbF7
KbF8
KbF9
KbHome
KbInsert
KbLeft
KbLeftAlt
KbLeftControl
KbLeftShift
KbNumpad0
KbNumpad1
KbNumpad2
KbNumpad3
KbNumpad4
KbNumpad5
KbNumpad6
KbNumpad7
KbNumpad8
KbNumpad9
KbNumpadAdd
KbNumpadDivide
KbNumpadMultiply
KbNumpadSubtract
KbPageDown
KbPageUp
KbPause
KbReturn (center of keyboard)
KbRight
KbRightAlt
KbRightControl
KbRightShift
KbSpace
KbTab
KbUp
MsLeft
MsMiddle
MsRight
MsWheelDown
MsWheelUp
GpButton0
GpButton1
GpButton10
GpButton11
GpButton12
GpButton13
GpButton14
GpButton15
GpButton2
GpButton3
GpButton4
GpButton5
GpButton6
GpButton7
GpButton8
GpButton9
GpDown
GpLeft
GpRight
GpUp
}}}
 