#summary How to set up Gosu on Windows.

= Download Boost, change Visual C++ Directories (C++ only) =

[http://www.boost.org/ Boost] is a collection of libraries that is used throughout Gosu's interface. Many parts of Boost have been marked for inclusion in the next standard of C++, so you'd better look at it anyway! :) Download the latest release and extract it into a separate directory.

In Visual C++, go to Tools/Options/Projects and Solutions/VC++ Directories. Select the list of directories for include files and add the two directories you extracted boost and Gosu into—not the contained 'boost' or 'Gosu' subfolders.

http://www.libgosu.org/wiki_images/msvc_1_include.png

Also, select library files, and add the 'lib' subfolder from Gosu so MSVC can find Gosu.lib.

http://www.libgosu.org/wiki_images/msvc_2_lib.png

= Creating a new Gosu game (C++) =

Click File/New/Project and select 'Win32 project', then give it a name and in the application settings choose 'Empty project'.

http://www.libgosu.org/wiki_images/msvc_3_proj.png

http://www.libgosu.org/wiki_images/msvc_4_proj2.png

*Note:* In the Express edition of MSVC, only "Win32 console application" is available. In this case, just add the following line somewhere in your source code. It should not affect building on other platforms. (Thanks for the tip, anza!)

`
#pragma comment(linker, "/SUBSYSTEM:windows /ENTRY:mainCRTStartup")
`

You can then add new code files, for example the one from the tutorial.

Next, you need to go into the project options, select C/C++ options, then Code Generation and change the used library from "Multithreaded DLL" to "Multithreaded", and "Multithreaded Debug DLL" to "Multithreaded Debug", respectively—or you will get linker errors. These options are usually only available after adding the first C++ source file.

http://www.libgosu.org/wiki_images/msvc_5_rt.png

To ensure that your EXE file can find fmod.dll and your project's resources, you should also change its output directory for both configurations. (In this case I have put fmod.dll into the examples folder and built straight to that as I was testing the Tutorial game.)

http://www.libgosu.org/wiki_images/msvc_6_outputdir.png

If you need a starting point or want to test if everything is correctly set up, select File/New, add a new C++ source file and use this code to compile and run:

{{{
#include <Gosu/AutoLink.hpp>
#include <Gosu/Window.hpp>

class MyWindow : public Gosu::Window
{
public:
    MyWindow()
    : Gosu::Window(640, 480, false, 20)
    {
        setCaption(L"Hello World!");
    }
};

int main(int argc, char* argv[])
{
    MyWindow win;
    win.show();
    return 0;
}
}}}

= Creating a new Gosu game (Ruby) =

Getting started with Ruby is a lot easier.
If you are working with gems, simply require 'rubygems', then 'gosu'. If you are working with the ZIP archive, copy gosu.so (and if you are using sound, fmod.dll) into your project's directory. Here is a minimal application to ensure that everything works:

{{{
begin
  # In case you use Gosu via RubyGems.
  require 'rubygems'
rescue LoadError
  # In case you don't.
end

require 'gosu'

class MyWindow < Gosu::Window
  def initialize
    super(640, 480, false, 20)
    self.caption = 'Hello World!'
  end
end

w = MyWindow.new
w.show
}}}

That's it — have fun!
 