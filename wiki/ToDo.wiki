#summary List of upcoming To Do items, refreshed daily.
#labels Featured

= To Do list =

This list of tasks is exported automatically from my OmniFocus projects.
(Last update: 2010-08-24)

== Gosu 0.7.x ==
  * Announce MSVS08 Switch & update docs
  * Re-compile configure.ac
  * Fix Segfault when Image.new doesn't find its file on Linux
  * Let @jeedee know about progress if existing
  * See why Gosu::~Song with Ogg files sometimes causes other songs to stop
  * Ensure that Gosu::Song: currentSong is never 0'ed asynchronously
  * Ensure that Gosu::createText always widthx1 pixels for empty strings
  * Add m4a to audio_formats.rb
  * Make <c=> more somehow efficient in Font::drawRel
  * Add <s=> to text formatting
  * Make fuchsia work in BMPs in GosuTouch
  * Fix PNG alpha in Inv.png
  * Fix 8bitAlpha.png supplied by shawn42
  * Test Gosu&ocra with FMOD.dll/audiere.dll/whatever.dll
  * See if I should fork out RubyGosu.app into Ruby App project
  * Gosu: try integer truncing of drawing positions
  * Remove setResolution and use transforms instead
  * Windows: Improve shrinking heuristics (get task bar size)
  * WindowX: add shrinking for oversized resolutions
  * Let enableUndocumentedRetrofication always throw an exception so people use rescue blocks :)
  * Use Gosu text formatting in Tutorial.rb
  * Switch to SWIG 2.0 and see which bugs remain
  * Throw an exception when using multiple Windows
  * Add scaling to SDL text so descenders don't overflow
  * Add FontFlags support for SDL_TTF Gosu/Text
  * Fix Unicode support for SDL_TTF port (UnicodeTest.rb, @loc_test)
  * Make C++'s Gosu::multiply available in Ruby
  * Add Numeric#clamp, Numeric#wrap to Ruby
  * Look at http://audiere.sourceforge.net/ for Windows
  * Make Window arguments optional for Audio, but throw exceptions when in wrong order
  * Make Window arguments optional for Graphics, but throw exceptions when in wrong order
  * Verify usefulness of this task: "Gosu: compile x86_64 with gcc 4.2 on OS X"
  * Think about button_id_to_char and vice versa on 64-bit (new Tasks)
  * Test StandBy with Windows and a running Gosu app
  * See if really old games have problems running in current Gosu
  * The screen size/OpenGL stuff …
    * See if John Shea's talk had something about not being locked to pixel positions
    * Make initial window black instead of garbled on OS X
    * Add support for giving font flags from Ruby
    * Screen size / fullscreen stuff
      * Iterate on first category of fullscreen tests
      * Add fullscreen accessors to make proper FS OpenGL possible
      * Add fullscreen stretching prevention
      * Re-Evaluate glfw for fixing the fullscreen mess
      * Think about adding cmd+F support for toggling fullscreen: Possible?
      * Think about adding alt+enter support for toggling fullscreen: Possible?
      * Try not to hide the mouse cursor outside of the main window on OS X
      * Test multiple screens on Windows
    * TextField with clip_to (update example)
  * Look for non-deprecated replacement for KeyTranslate and UCKeyTranslate
  * Make Gosu fun to use on OS X
    * Create C++ app template for Xcode
    * Create iPhone app template for Xcode
    * Create .pkg wrapper to install Gosu into /Developer/Gosu
  * More OpenAL niceties
    * Look at protea as an FMOD replacement http://www.viremo.de/proteaAudio/
    * Try to add dynamic MikMod loading code
    * See if there is a native/fastest mixing rate on Mac/iPhone
    * Make buffers in Mac port larger and make sure that update_interval<66 always plays running Songs without jitter
    * Check Song::play() behavior on new MikMod song vs. other libs
  * Try harder to reproduce these bugs
    * Get rid of context selection error with driver set to always do FSAA (Windows)
    * OS X: Release all keys on battery notification dialog (?)
  * Finish the RMagick bundling thing
    * Try to build RMagick.bundle against the 10.4 SDK
    * Link the all-in-one-bundle from the boards: http://rubyforge.org/forum/forum.php?thread_id=26872&forum_id=32
    * Test RMagick.bundle on Tiger
    * Test RMagick.bundle on PPC
  * Replace draw_line by something that makes sense
  * Text quality
    * Realize ffUnderline by hand in createText/Font
    * See if the differences between from_text and Font#draw are a bug
    * Creating a non-existent font should throw an exception on all platforms, test on which it does
    * Font should respect monospaced fonts and fonts with very weird kerning (Zapfino...): do research
    * Verify that Daniel font works properly in Font and Text
    * Linux: Support Unicode in title bar
    * Linux: Support other XKeySyms than Latin 1
    * Mac: Add dead keys to TextInput
    * Mac: Use Core Text instead of ATSUI
  * Try wgois or http://appliedstochastics.com/articles/ruby_jsw.html for Linux gamepad support
  * Polish/deployment
    * Make it possible to delete images while they are still referenced in the queue.
    * Make Gosu::Color more fault-tolerant regarding its component values
    * Assure that files from doxygen task are considered for packaging
    * Compile all-in-one RMagick for Windows: http://rubyforge.org/forum/forum.php?thread_id=26872&forum_id=32
    * Get rid of quad/tri/line drawing
    * Review: http://rubyforge.org/tracker/index.php?func=detail&aid=21405&group_id=375&atid=1504
    * Make sure README and LICENSE are appropriately named in the Gem
    * Collect Gosu YouTube videos and link them prominently
    * Create a dynamic screenshot page for all the topics in the Showcase
    * Mac OS: Mauszeiger wird im FS sichtbar bei Klick in obere linke Ecke: Warum?
    * Examples leichter findbar machen
    * Rakefile sollte autoconf ausführen
    * Deployment-Hilfe, Rakefile, Mac
    * Deployment-Hilfe, Rakefile, Win
    * Retry properly showing/hiding the mouse on OS X (immune to blocking main thread)
    * Make the wrapper's menu bar on OS X more complete
    * Now that the Rakefile works, stop doing every task every time (use file dependencies)
    * Make it easier to find the examples from the Gem
  * Make Mac/Gosu work with Rubinius
  * Re-introduce Async support
  * Make plans for an official Scene/State system
  * Look at http://freeimage.sourceforge.net/requirements.html
  * Look at http://slick.cokeandcode.com/index.php?entry=entry080426-213044
  * Experiment: resizing the window possible?
  * Create concept: Allow custom OpenGL actions to be put into the Z ordering queue
  * More alpha modes! http://www.adobe.com/devnet/pdf/pdfs/blend_modes.pdf
  * Document Gosu::interpolate, improve it too?
  * Experiment: resizing the window possible?
  * Think: Possible to have beautiful quotation mark indenting?@Gosu Text
  * See if other libraries catch the release of the 'A' key in cmd+a
  * If there ever is functionality to 'and' and 'or' Gosu::Button, how would one check in buttonDown?
  * Add check for Caps Lock/Num Lock
  * KbBracketLeft and KbBracketRight for ÖÄ?
  * Make more stuff configurable like http://github.com/cout/rice/blob/98ba7098e2de5849f2e7272021340976a768456f/ruby.ac#L7-20
  * Experimentation with new drawing syntax; maybe first prototype as the last version of the 0.7.x series?
  * Deprecate Image::getData, introduce Image::data
  * Try and see if Gosu can be made to correctly release pushed buttons when the keyboard is overloaded
== Gosu Touch ==
  * See what OolongEngine does better than GosuTouch (I guess: timing, audio?)
  * See if xiph Tremor makes sense for Gosu Touch
  * Let resolution decide orientation
  * Integrate "fat" iPhone building from forum
  * Clear up GOSU_IS_MAC vs. GOSU_IS_OSX
  * Migrate WindowTouch.mm to CADisplayLink (3.1 SDK)
  * Make sure that iPhone VA vertices are small and well-aligned
  * Use getBytes instead of UTF8String
== Gosu CI/Usability ==
  * Document 64px minimum for reliable single-texture optimization
  * Mention Gosu's respectable age somewhere :)
  * Link to benkos example & Chingu regarding states
  * Put RubyTutorial into rdoc
  * Add some first eye catchers to front page
  * Add "What now?" link list to front page
  * Emphasize difference between button_down and button_down? somewhere
  * Link YouTube videos, and maybe blog tags like http://www.cuberick.com/search/label/gosu?
  * Make logo in forum clickable
  * Make logo in Rdoc clickable
  * Link ChangeLog and ToDo on front page
  * Make sure createText is visible in Doxygen
  * Add OpenGL Wiki page
  * Add Unicode Support wiki page
  * Add some RSS feed to main index.html page
  * Make tt blocks prettier on front page
  * Try to translate the RubyTutorial to Japanese :)
  * Deployment wiki page/rdoc: Mention Icon resource support!
  * Note that draw can be called more often than update in the main loop
  * UTF8 Support for PotD texts(?)
  * Change weirdo homepage text about RMagick
  * Donate to allison's author when I'm home
  * Explain SampleInstance vs. Sample somewhere
  * OR&G: Build simpler version
  * Check if DelphiGL wiki accepts donations
  * Tutorials: Mention where to find the final source code
  * Document MAX_TEXTURE_SIZE
  * .app'ify ippa's game after :retrofy is in and the wrapper can handle texplay
  * Consider libgosu.spreadshirt.com
  * Make sure that it is documented what happens to different drawing ops with same z-order
  * Update README.txt year
  * Include CptnCpp as sample game
  * Document alpha modes for Ruby
  * Add rdoc to Gosu gem
  * Update TextInput.cpp to include setCaretPos
  * Make sure that WindowMainLoop states that the whole order is just about perceived performance
  * Document how Font roughly works (allow devs to cache chars by text_width'ing the alphabet)
  * Delete anything saying that TTF does not work on Linux
== Gosu 0.8.x (preliminary) ==
  * Rename needs_* to need_* in Ruby
  * Ask board: 0x00 alpha == opaque? Switch worth it? Esp. what to do with Color::WHITE
  * Let Image() lazy-load its file using Gosu::File (which keeps the file alive until it is really needed), add Gosu::loading_progress and Gosu::load_more for easy loading bars
  * Make Window::needsCursor return true by default for Windowed games
  * Make Image, Sample, Song, Font use an intrusive_ptr internally
  * Make things tileable by default but add :smooth and :pure or something like that
  * Experimentation: In Ruby, can the window be a singleton and still provide the ability to inherit from it? (Singleton standard class)
  * Use float instead of double everywhere
  * Rename pimpl/Impl to p/Private
  * Add accelerometer support for OS X; maybe find a way to use UniMotion
  * Redesign (see forum) drawing interface
  * Rewrite Gosu::Input with support for multiple gamepads and analog joysticks, serializable button IDs, …
  * Windows: Input will regularly query devices which are not currently attached, thereby causing the game to halt every few seconds - think about this
  * FSAA/mipmap experiments
  * Provide C++ application templates where possible, maybe even installers for the templates
  * Apple remote support would rule.
  * Assure Gosu::File also creates directories as necessary
  * more C++ examples
  * simplify Gosu's IO philosophy (C++)
  * document Gosu's Sockets
  * Gosu::Scope instead of beginGL/endGL etc.
