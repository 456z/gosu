#summary List of upcoming To Do items, refreshed daily.
#labels Featured

= To Do list =

This list of tasks is exported automatically from my OmniFocus projects.
(Last update: 2009-09-07)

== Gosu 0.7.x ==
  * Install Ruby 1.9.1 universally (???)
  * re'mv boost
  * Build experimental three-way universal Gosu gem
  * Let Marco/Alex test experimental 64-bit gem
  * Issue hotfix for Gosu on Snow Leopard
  * Think about button_id_to_char and vice versa on 64-bit (new Tasks)
  * Look at TextInput contrib
  * Test StandBy with Windows and a running Gosu app
  * Get Anna or someone else to test the new OpenAL code on Intel/Tiger...
  * Either document gosu_to_radian_scale or rename it before anyone relies on it
  * Web work
    * Move three threads from GosuExchange to the forums
    * Ask some forum whether the Intel GMA950 and X3100 chips really don't support OGL vsync on Windows
    * Ask some forum why the IntelCPUPowerManagement could hang for 42sec
    * Report Ocra bugs: spaces in exe name = crash, requires .rb and .so files?!
  * 0.7.15 (bugfixes bugfixes bugfixes)
    * Revisit "garbled screen" bug on Mac
    * Add -I/usr/include/SDL to the makefile
    * See if John Shea's talk had something about not being locked to pixel positions
    * See if really old games have problems running in current Gosu
    * Verify that TextInput works cleanly on Ruby 1.9 with Unicode
    * Add support for giving font flags from Ruby
    * Complete the list of Gosu::Colors, inspired by the CSS colors, and move them to Color in Ruby / support :red/:green/etc…
    * Screen size / fullscreen stuff
      * Iterate on first category of fullscreen tests
      * Allow adjustment of the virtual touchscreen resolution
      * Make initial window black instead of garbled on OS X
      * Windows: Don't fail if the requested windowed resolution is too large
      * Add fullscreen accessors to make proper FS OpenGL possible
      * Add fullscreen stretching prevention
      * Try not to hide the mouse cursor outside of the main window on OS X
      * Test multiple screens on Windows
    * TextField with clip_to (update example)
    * Test LD14 entry on Linux
    * Release 0.7.15
    * (1x mymüsli for all the hard work! (motivation!)
  * iPhone-related stuff that should be finished soonish
    * Let resolution decide orientation
    * Implement Proof of Concept for Macro Patches
    * socket.bundle und syck.bundle in den Wrapper reinschweißen
    * Integrate "fat" iPhone building from forum
    * Clear up GOSU_IS_MAC vs. GOSU_IS_OSX
    * Use getBytes instead of UTF8String
  * More OpenAL niceties
    * Look at protea as an FMOD replacement http://www.viremo.de/proteaAudio/
    * Try to add dynamic MikMod loading code
    * See if there is a native/fastest mixing rate on Mac/iPhone
    * Make buffers in Mac port larger and make sure that update_interval<66 always plays running Songs without jitter
    * Check Song::play() behavior on new MikMod song vs. other libs
    * Move decoding/updating into another thread (yuck)
  * Try a quick prototype of Gosu working with Shoes (if that doesn't work, wxRuby)
  * Try harder to reproduce these bugs
    * Get rid of context selection error with driver set to always do FSAA (Windows)
    * OS X: Release all keys on battery notification dialog (?)
  * Finish the RMagick bundling thing
    * Try to build RMagick.bundle against the 10.4 SDK
    * Link the all-in-one-bundle from the boards: http://rubyforge.org/forum/forum.php?thread_id=26872&forum_id=32
    * Test RMagick.bundle on Tiger
    * Test RMagick.bundle on PPC
  * 0.7.16, text quality release (+Linux gamepad!)
    * See if the differences between from_text and Font#draw are a bug
    * Look for non-deprecated replacement for KeyTranslate and UCKeyTranslate
    * Font should respect monospaced fonts and fonts with very weird kerning (Zapfino...): do research
    * Verify that Daniel font works properly in Font and Text
    * Image#from_text should support maxWidth=0 => no limits on size
    * Linux: Support Unicode in title bar
    * Linux: Support other XKeySyms than Latin 1
    * Mac: Add dead keys to TextInput
    * Mac: Use Core Text instead of ATSUI
    * Windows: Make createText use Uniscribe
    * Make RTL work without RTL/LTR markers?!
    * Add RTL support to Font::drawRot too
    * Add Linux gamepad support, try wgois for that
  * 0.7.15, polish/deployment release
    * Make it possible to delete images while they are still referenced in the queue.
    * Assure that files from doxygen task are considered for packaging
    * Compile all-in-one RMagick for Windows: http://rubyforge.org/forum/forum.php?thread_id=26872&forum_id=32
    * Find out why Cmd+char triggers two button_downs, but only one button_up!
    * Get rid of quad/tri/line drawing
    * Review: http://rubyforge.org/tracker/index.php?func=detail&aid=21405&group_id=375&atid=1504
    * Make sure README and LICENSE are appropriately named in the Gem?
    * Collect Gosu YouTube videos and link them prominently
    * Create a dynamic screenshot page for all the topics in the Showcase
    * Mac OS: Mauszeiger wird im FS sichtbar bei Klick in obere linke Ecke: Warum?
    * Examples leichter findbar machen
    * Bessere Ruby-Deployment-Hilfen
    * Assure that files from doxygen task are considered for packaging
    * FMOD3: Sound auf Vista blockiert bei mehreren Benutzern?
    * Windows build task possible? Clarify
    * Look how http://github.com/singpolyma/rubygame/tree/master gets the Debian packaging done
    * Rakefile sollte autoconf ausführen
    * Linux: Either install gosu.so to Ruby libdir, or don't build it at all
    * Deployment-Hilfe, Rakefile, Mac
    * Add Wiki tutorial on how to lazily link FMOD
    * Deployment-Hilfe, Rakefile, Win
    * Retry properly showing/hiding the mouse on OS X (immune to blocking main thread)
    * Make the wrapper's menu bar on OS X more complete
    * Now that the Rakefile works, stop doing every task every time (use file dependencies)
    * Make it easier to find the examples from the Gem
  * Make plans for an official Scene system
  * Look at http://rubyforge.org/projects/rbplusplus
  * Look at http://freeimage.sourceforge.net/requirements.html
  * Look at http://slick.cokeandcode.com/index.php?entry=entry080426-213044
  * Experiment: resizing the window possible?
  * Experimentation with new drawing syntax; maybe first prototype as the last version of the 0.7.x series?
  * Create concept: Allow custom OpenGL actions to be put into the Z ordering queue
  * More alpha modes! http://www.adobe.com/devnet/pdf/pdfs/blend_modes.pdf
  * Document Gosu::interpolate, improve it too?
  * Experiment: resizing the window possible?
  * Introduce 0.8 syntax
    * Make sure Images can live without a Window (context!)
    * Add Image::Image *and set hardBorders to true on default*
  * Think: Possible to have beautiful quotation mark indenting?@Gosu Text
  * Benchmark clip_to; worth replacing with stencils?
  * See if other libraries catch the release of the 'A' key in cmd+a
  * If there every is functionality to 'and' and 'or' Gosu::Button, how would one check in buttonDown?
  * Find out why applyColorKey smears solid image data to the lower right
  * Add rdoc to Gosu gem
  * Make Linux gemspec more robust wrt examples/
  * Make more stuff configurable like http://github.com/cout/rice/blob/98ba7098e2de5849f2e7272021340976a768456f/ruby.ac#L7-20
== Gosu CI/Usability ==
  * Refresh ToDo list only when necessary
  * Document 64px minimum for single-texture opt.
  * Mention Gosu's respectable age somewhere :)
  * Link to benkos example
  * Paste spiit up BasicConcepts into doxygen sources
  * Put RubyTutorial into rdoc
  * Add some first eye catchers to front page
  * Add "What now?" link list to front page
  * Adjust sample games
  * Link YouTube videos, and maybe blog tags like http://www.cuberick.com/search/label/gosu?
  * Change sender address of forum mailer
  * Make logo in forum clickable
  * Make logo in Rdoc clickable
  * Setup github homepage
  * Link ChangeLog and ToDo on front page
  * Make sure createText is visible in Doxygen
  * Add OpenGL Wiki page
  * Add Unicode Support wiki page
  * Add some RSS feed to main index.html page
  * Make tt blocks prettier on front page
  * Turn changelog and todo into links on frontpage
  * Automatically run push_to_github task
  * Try to translate the RubyTutorial to Japanese :)
  * Deployment wiki page/rdoc: Mention Icon resource support!
  * Document draw_line's weirdness
  * Note that draw can be called more often than update in the main loop
  * Setup board so it yields 301 redirects for vu2040
  * UTF8 Support for PotD texts(?)
  * Move from doxygen to NaturalDocs experimentally
  * Use rubyforge gem in Gosu rakefile to upload releases
  * Change weirdo homepage text about RMagick
  * Donate to allison's author when I'm home
  * Explain SampleInstance vs. Sample somewhere
  * Correct wikipedia article: http://en.wikipedia.org/wiki/Chipmunk_physics_engine
== Gosu 0.8.x (preliminary) ==
  * Flesh out tasks below …
  * Experimentation: In Ruby, can the window be a singleton and still provide the ability to inherit from it? (Singleton standard class)
  * Use float instead of double everywhere
  * Redesign (see forum) drawing interface
  * Rewrite Gosu::Input with support for multiple gamepads and analog joysticks, serializable button IDs, …
  * Windows: Input will regularly query devices which are not currently attached, thereby causing the game to halt every few seconds - think about this
  * FSAA/mipmap experiments
  * force feedback would be cool
  * Provide C++ application templates where possible, maybe even installers for the templates
  * much improved text output system, at the VERY least/as a first step, Font shouldn't be forced to be bold
  * more alpha modes, yay!
  * find a way to factor rot flips out of Gosu => Image/draw redesign
  * implement clipping and a target() modifier for the new Image
  * speed up LargeImageData?!
  * Apple remote support would rule.
  * clean up after playing around with possible optimizations
  * assure Gosu::File also creates directories as necessary
  * more C++ examples
  * the window argument in Ruby is annoying, because only one window can be used anyway. Maybe it should be Window.run, and all open Windows should work.
  * simplify Gosu's IO philosophy (C++)
  * document Gosu's Sockets
