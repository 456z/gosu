#summary List of upcoming To Do items, refreshed daily.
#labels Featured

= To Do list =

This list of tasks is exported automatically from my OmniFocus projects.
(Last update: 2009-02-04)

== Gosu 0.7.x ==
  * 0.7.12, after-LD / publicity release
    * Don't round updateInterval on Windows
    * Test if a default value of 16.0000 for updateInterval makes more sense
    * Release 0.7.12
    * Document Song::..., SampleInstance::..., zImmediate
    * Change Gosu hosting
      * SSH auth via key has to work (RailsHoster)
      * Automate backing up the board
      * Google/ask for timeout-based "new" system in mwForum
    * Announce Gosu 0.7.12 + [forums.]libgosu.org + LD results
  * 0.7.13, performance/graphics release
    * Clipping benchmark
    * Windows: Don't fail if the requested windowed resolution is too large
    * Take a look at Crate: http://copiousfreetime.rubyforge.org/crate/
    * RMagick auf Windows statisch kompilieren: http://rubyforge.org/forum/forum.php?thread_id=26872&forum_id=32
    * RMagick auf OS X statisch kompilieren: http://rubyforge.org/forum/forum.php?thread_id=26872&forum_id=32
    * Experiment: resizing the window possible?
    * Benchmark Z_IMMEDIATE
    * Add fullscreen accessors to make proper FS OpenGL possible
    * More alpha modes! http://www.adobe.com/devnet/pdf/pdfs/blend_modes.pdf
    * TextField with clip_to (update example)
    * Add fullscreen stretching prevention
    * Try not hiding the mouse cursor outside of the main window on OS X
    * Iterate on first category of fullscreen tests
    * Add Proof of Concept for Macro Patches
    * Test multiple screen on Windows
    * Get rid of OpenGL tearing with GMA950 on Windows
    * Get rid of context selection error with driver set to always do FSAA
    * Don't round updateInterval on Linux
    * Implement frameskip
    * Be able to have more logical FPS than Hz despite working vsync
    * Font should respect monospaced fonts and fonts with very weird kerning (Zapfino...): do research
    * Ruby 1.9-Support
      * Compile Ruby 1.9 on Intel (Mac)
      * Compile Ruby 1.9 on PPC (Mac)
      * RG Deployment Template auf 1.9 umstellen
      * Look into Ruby 1.9 on Windows
      * Document support for Ruby 1.9
      * Package OR&G with optimized Gosu
  * 0.7.14, polish/deployment release
    * Assure that files from doxygen task are considered for packaging
    * Find out why Cmd+char triggers two button_downs, but only one button_up!
    * Reviewen: http://rubyforge.org/tracker/index.php?func=detail&aid=21405&group_id=375&atid=1504
    * Make sure README and LICENSE are appropriately named in the Gem?
    * Fragen: Monet zu Gosu Showcase hinzufügen
    * Collect Gosu YouTube videos and link them prominently
    * Mac OS: Mauszeiger wird im FS sichtbar bei Klick in obere linke Ecke: Warum?
    * Examples leichter findbar machen
    * Bessere Ruby-Deployment-Hilfen
    * Assure that files from doxygen task are considered for packaging
    * FMOD3: Sound auf Vista blockiert bei mehreren Benutzern?
    * Windows Vista + RubyScript2exe: Bug reposten
    * Windows build task possible? Clarify
    * Look how http://github.com/singpolyma/rubygame/tree/master gets the Debian packaging done
    * Rakefile sollte autoconf ausführen
    * Linux: Either install gosu.so to Ruby libdir, or don't build it at all
    * Deployment-Hilfe, Rakefile, Mac
    * Add Wiki tutorial on how to lazily link FMOD
    * Deployment-Hilfe, Rakefile, Win
    * Retry properly showing/hiding the mouse on OS X (immune to blocking main thread)
    * Make the wrapper's menu bar on OS X more complete
    * Now that the Rakefile works, stop doing every task every time (use file dependencies)
    * Make it easier to find the examples from the Gem
  * 0.7.15, text quality release
    * Linux: Support Unicode in title bar
    * Linux: Support other XKeySyms than Latin 1
    * Mac: Add dead keys to TextInput
    * Mac: Make createText use ATSUI
    * Windows: Make createText use Uniscribe
    * Linux: Make createText use Pango/Freetype2
    * Make RTL work without RTL/LTR markers?!
    * Add RTL support to Font::drawRot too
  * Implement mouse_x=/mouse_y= on each platform
  * Make plans for an official Scene system
  * Look at http://rubyforge.org/projects/rbplusplus
  * Look at http://freeimage.sourceforge.net/requirements.html
  * Look at http://slick.cokeandcode.com/index.php?entry=entry080426-213044
  * Experimentation with new drawing syntax; maybe first prototype as the last version of the 0.7.x series?
  * RMagick auf Windows statisch kompilieren: http://rubyforge.org/forum/forum.php?thread_id=26872&forum_id=32
  * Document Gosu::interpolate, improve it too?
  * Experiment: resizing the window possible?
== Gosu CI/Usability ==
  * Iterate on main page design
  * Adjust forum design
  * Adjust GoogleCode design
  * Adjust RubyGosu Deployment icon
  * Adjust sample games
  * See if doxygen can also use Ruby input
  * Adjust doxygen output
  * Automatically upload doxygen output
  * Make Ruby reference available online, automatically
  * Link YouTube videos, and maybe blog tags like http://www.cuberick.com/search/label/gosu?
  * Gosu.gstencil?
  * Change sender address of forum mailer
== Gosu 0.8.x (preliminary) ==
  * Flesh out tasks below …
  * Think about using pre-multiplied alpha internally: http://home.comcast.net/~tom_forsyth/blog.wiki.html
  * Experimentation: In Ruby, can the window be a singleton and still provide the ability to inherit from it? (Singleton standard class)
  * Use float instead of double everywhere
  * Redesign (see forum) drawing interface
  * Rewrite Gosu::Input with support for multiple gamepads and analog joysticks, serializable button IDs, …
  * Windows: Input will regularly query devices which are not currently attached, thereby causing the game to halt every few seconds - think about this
  * FSAA/mipmap experiments
  * force feedback would be cool
  * Provide C++ application templates where possible, maybe even installers for the templates
  * much improved text output system, at the VERY least/as a first step, Font shouldn't be forced to be bold
  * more alpha modes, yay!
  * find a way to factor rot flips out of Gosu => Image/draw redesign
  * implement clipping and a target() modifier for the new Image
  * speed up LargeImageData?!
  * Apple remote support would rule.
  * clean up after playing around with possible optimizations
  * assure Gosu::File also creates directories as necessary
  * more C++ examples
  * the window argument in Ruby is annoying, because only one window can be used anyway. Maybe it should be Window.run, and all open Windows should work.
  * simplify Gosu's IO philosophy (C++)
  * document Gosu's Sockets
