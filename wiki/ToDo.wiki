#summary Gosu's roadmap.
#labels Featured

These are the remnants of my ToDo list. All the stuff that could be done in 0.7.x has been turned into OmniFocus tasks. Maybe I will write an AppleScript to sync them to this list some day.

= 0.8.0 (after a cleanup/documentation delay)=
  * Experimentation: In Ruby, can the window be a singleton and still provide the ability to inherit from it? (Singleton standard class)
  * Experimentation: Should the C++ version keep using wstring, or switch to UTF-8 strings?
  * clean up Ruby's interface; draw_quad and friends should require the Z parameter (BREAKS CODE)
  * rewrite Gosu::Input with support for multiple gamepads and analog joysticks, serializable button IDs, â€¦
  * provide C++ application templates where possible, maybe even installers for the templates

= Major design goals for 0.8.x (graphics, polish) =
  * much improved text output system, at the VERY least/as a first step, Font shouldn't be forced to be bold
  * more alpha modes, yay!
  * find a way to factor rot flips out of Gosu => Image/draw redesign
  * implement clipping and a target() modifier for the new Image
  * speed up LargeImageData!
  * Apple remote support would rule.
  * clean up after playing around with possible optimizations
  * assure Gosu::File also creates directories as necessary
  * more C++ examples

= Major design goals for 0.9.x (IO) =
  * the window argument in Ruby is annoying, because only one window can be used anyway. Maybe it should be Window.run, and all open Windows should work.
  * simplify Gosu's IO philosophy (C++)
  * document Gosu's Sockets

= Major design goals for 1.x (perfection) =
  * Windows: Input will regularly query devices which are not currently attached, thereby causing the game to halt every few seconds - think about this
  * FSAA/mipmap experiments
  * force feedback would be cool
 