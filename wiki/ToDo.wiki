#summary List of upcoming To Do items, refreshed daily.
#labels Featured

= To Do list =

This list of tasks is exported automatically from my OmniFocus projects.
(Last update: 2010-03-12)

== Gosu 0.7.x ==
  * Find out how to: merge mathias' git patches back to svn
  * Get Gosu working with TextMate again
    * Test in new/clean install of TextMate
    * Update TextMate to latest
    * Simulate running, see what is causing the problem
    * Either fix Gosu or report bug
  * Test RNADALE.rb with newest Ruby 1.9
  * Sneak ippa's OpenGL retrofication in (don't document, psst, still secret!)
  * Fix custom font loading on 10.6 (after installing 10.6, using LSMinimumSystemVersionByArchitecture—works for Frameworks?)
  * Quickly fix Sockets for 64-bit compatibility (long -> int32_t)
  * Rename Gosu ToScale functions and publish new version
  * Check out SDL_ttf as custom TTF alternative
  * Gosu: compile x86_64 with gcc 4.2 on OS X
  * Update to newer Ruby 1.9 version in RubyGosu App.app
  * Think about button_id_to_char and vice versa on 64-bit (new Tasks)
  * Test StandBy with Windows and a running Gosu app
  * The screen size/OpenGL stuff …
    * See if John Shea's talk had something about not being locked to pixel positions
    * See if really old games have problems running in current Gosu
    * Make initial window black instead of garbled on OS X
    * Add support for giving font flags from Ruby
    * Screen size / fullscreen stuff
      * Iterate on first category of fullscreen tests
      * Allow adjustment of the virtual touchscreen resolution
      * Windows: Don't fail if the requested windowed resolution is too large
      * Add fullscreen accessors to make proper FS OpenGL possible
      * Add fullscreen stretching prevention
      * Re-Evaluate glfw for fixing the fullscreen mess
      * Think about adding cmd+F support for toggling fullscreen: Possible?
      * Think about adding alt+enter support for toggling fullscreen: Possible?
      * Try not to hide the mouse cursor outside of the main window on OS X
      * Test multiple screens on Windows
    * TextField with clip_to (update example)
  * iPhone-related stuff that should be finished soonish
    * Let resolution decide orientation
    * socket.bundle und syck.bundle in den Wrapper reinschweißen
    * Integrate "fat" iPhone building from forum
    * Clear up GOSU_IS_MAC vs. GOSU_IS_OSX
    * Migrate WindowTouch.mm to CADisplayLink (3.1 SDK)
    * Make sure that iPhone VA vertices are small and well-aligned
    * Use getBytes instead of UTF8String
  * More OpenAL niceties
    * Look at protea as an FMOD replacement http://www.viremo.de/proteaAudio/
    * Try to add dynamic MikMod loading code
    * See if there is a native/fastest mixing rate on Mac/iPhone
    * Make buffers in Mac port larger and make sure that update_interval<66 always plays running Songs without jitter
    * Check Song::play() behavior on new MikMod song vs. other libs
  * See if Shoes is still alive and try a quick prototype of Gosu working with Shoes (if that doesn't work, wxRuby)
  * Try harder to reproduce these bugs
    * Get rid of context selection error with driver set to always do FSAA (Windows)
    * OS X: Release all keys on battery notification dialog (?)
  * Finish the RMagick bundling thing
    * Try to build RMagick.bundle against the 10.4 SDK
    * Link the all-in-one-bundle from the boards: http://rubyforge.org/forum/forum.php?thread_id=26872&forum_id=32
    * Test RMagick.bundle on Tiger
    * Test RMagick.bundle on PPC
  * Replace draw_line by something that makes sense
  * Text quality release (+Linux gamepad!)
    * See if the differences between from_text and Font#draw are a bug
    * Look for non-deprecated replacement for KeyTranslate and UCKeyTranslate
    * Creating a non-existent font should throw an exception on all platforms, test on which it does
    * Font should respect monospaced fonts and fonts with very weird kerning (Zapfino...): do research
    * Verify that Daniel font works properly in Font and Text
    * Image#from_text should support maxWidth=0 => no limits on size
    * Linux: Support Unicode in title bar
    * Linux: Support other XKeySyms than Latin 1
    * Mac: Add dead keys to TextInput
    * Mac: Use Core Text instead of ATSUI
    * Windows: Make createText use Uniscribe
    * Make RTL work without RTL/LTR markers?!
    * Add RTL support to Font::drawRot too
    * Add Linux gamepad support, try wgois for that
  * Polish/deployment release
    * Make it possible to delete images while they are still referenced in the queue.
    * Make Gosu::Color more fault-tolerant regarding its component values
    * Assure that files from doxygen task are considered for packaging
    * Compile all-in-one RMagick for Windows: http://rubyforge.org/forum/forum.php?thread_id=26872&forum_id=32
    * Find out why Cmd+char triggers two button_downs, but only one button_up!
    * Get rid of quad/tri/line drawing
    * Review: http://rubyforge.org/tracker/index.php?func=detail&aid=21405&group_id=375&atid=1504
    * Make sure README and LICENSE are appropriately named in the Gem?
    * Collect Gosu YouTube videos and link them prominently
    * Create a dynamic screenshot page for all the topics in the Showcase
    * Mac OS: Mauszeiger wird im FS sichtbar bei Klick in obere linke Ecke: Warum?
    * Examples leichter findbar machen
    * Bessere Ruby-Deployment-Hilfen
    * Assure that files from doxygen task are considered for packaging
    * FMOD3: Sound auf Vista blockiert bei mehreren Benutzern?
    * Windows build task possible? Clarify
    * Look how http://github.com/singpolyma/rubygame/tree/master gets the Debian packaging done
    * Rakefile sollte autoconf ausführen
    * Linux: Either install gosu.so to Ruby libdir, or don't build it at all
    * Deployment-Hilfe, Rakefile, Mac
    * Add Wiki tutorial on how to lazily link FMOD
    * Deployment-Hilfe, Rakefile, Win
    * Retry properly showing/hiding the mouse on OS X (immune to blocking main thread)
    * Make the wrapper's menu bar on OS X more complete
    * Now that the Rakefile works, stop doing every task every time (use file dependencies)
    * Make it easier to find the examples from the Gem
  * Make plans for an official Scene system
  * Look at http://rubyforge.org/projects/rbplusplus
  * Look at http://freeimage.sourceforge.net/requirements.html
  * Look at http://slick.cokeandcode.com/index.php?entry=entry080426-213044
  * Experiment: resizing the window possible?
  * Experimentation with new drawing syntax; maybe first prototype as the last version of the 0.7.x series?
  * Create concept: Allow custom OpenGL actions to be put into the Z ordering queue
  * More alpha modes! http://www.adobe.com/devnet/pdf/pdfs/blend_modes.pdf
  * Document Gosu::interpolate, improve it too?
  * Experiment: resizing the window possible?
  * Introduce 0.8 syntax
    * Make sure Images can live without a Window (context!)
    * Add Image::Image *and set hardBorders to true on default*
  * Think: Possible to have beautiful quotation mark indenting?@Gosu Text
  * Benchmark clip_to; worth replacing with stencils?
  * See if other libraries catch the release of the 'A' key in cmd+a
  * If there every is functionality to 'and' and 'or' Gosu::Button, how would one check in buttonDown?
  * Find out why applyColorKey smears solid image data to the lower right
  * Add rdoc to Gosu gem
  * Make Linux gemspec more robust wrt examples/
  * Add check for Caps Lock/Num Lock
  * KbBracketLeft and KbBracketRight for ÖÄ?
  * Make more stuff configurable like http://github.com/cout/rice/blob/98ba7098e2de5849f2e7272021340976a768456f/ruby.ac#L7-20
== Gosu CI/Usability ==
  * Document 64px minimum for reliable single-texture optimization
  * Mention Gosu's respectable age somewhere :)
  * Link to benkos example & Chingu regarding states
  * Put RubyTutorial into rdoc
  * Add some first eye catchers to front page
  * Add "What now?" link list to front page
  * Emphasize difference between button_down and button_down? somewhere
  * Link YouTube videos, and maybe blog tags like http://www.cuberick.com/search/label/gosu?
  * Change sender address of forum mailer
  * Make logo in forum clickable
  * Make logo in Rdoc clickable
  * Link ChangeLog and ToDo on front page
  * Make sure createText is visible in Doxygen
  * Add OpenGL Wiki page
  * Add Unicode Support wiki page
  * Add some RSS feed to main index.html page
  * Make tt blocks prettier on front page
  * Try to translate the RubyTutorial to Japanese :)
  * Deployment wiki page/rdoc: Mention Icon resource support!
  * Note that draw can be called more often than update in the main loop
  * UTF8 Support for PotD texts(?)
  * Move from doxygen to NaturalDocs experimentally
  * Change weirdo homepage text about RMagick
  * Donate to allison's author when I'm home
  * Explain SampleInstance vs. Sample somewhere
  * OR&G: Build simpler version
  * Check if DelphiGL wiki accepts donations
  * Tutorials: Mention where to find the final source code
  * Document MAX_TEXTURE_SIZE
  * .app'ify ippa's game after :retrofy is in
  * Consider libgosu.spreadshirt.com
  * Make sure that it is documented what happens to different drawing ops with same z-order
  * Update README.txt year
  * Include CptnCpp as sample game
  * Slap Tuiq until he posts Chuadrat again :P
  * Ask: Why not clWhite?
== Gosu 0.8.x (preliminary) ==
  * Experimentation: In Ruby, can the window be a singleton and still provide the ability to inherit from it? (Singleton standard class)
  * Use float instead of double everywhere
  * Redesign (see forum) drawing interface
  * Rewrite Gosu::Input with support for multiple gamepads and analog joysticks, serializable button IDs, …
  * Windows: Input will regularly query devices which are not currently attached, thereby causing the game to halt every few seconds - think about this
  * FSAA/mipmap experiments
  * force feedback would be cool
  * Provide C++ application templates where possible, maybe even installers for the templates
  * more alpha modes, yay!
  * find a way to factor rot flips out of Gosu => Image/draw redesign
  * speed up LargeImageData?!
  * Apple remote support would rule.
  * clean up after playing around with possible optimizations
  * assure Gosu::File also creates directories as necessary
  * more C++ examples
  * simplify Gosu's IO philosophy (C++)
  * document Gosu's Sockets
  * Gosu::Scope instead of beginGL/endGL etc.
